#--- source.hlsl

struct Input {
  float4 A;
  float4 B;
};

struct Output {
  float4 A;
};

StructuredBuffer<Input> In : register(t0);
StructuredBuffer<Input> InExtra : register(t1);
RWStructuredBuffer<Output> Out1 : register(u1);
RWStructuredBuffer<Output> Out2 : register(u2);

// Root signature to test manual `offset` and `numDescriptor` specification:
//  - Demonstrate manually describing the offsets and numDescriptors
//  - Edge-case value of `offset` = `DESCRIPTOR_RANGE_OFFSET_APPEND`
//  - Edge-case value of `numDescriptors` = `unbounded`

#define RootSig                                                                \
  "DescriptorTable( "                                                          \
  "  UAV(u2, offset = 3, numDescriptors = unbounded), "                        \
  "  SRV(t0, offset = 0, numDescriptors = 2), "                                \
  "  UAV(u1, "                                                                 \
  "    offset = DESCRIPTOR_RANGE_OFFSET_APPEND, "                              \
  "    numDescriptors = 1 "                                                    \
  "  ) "                                                                       \
  ")"

[RootSignature(RootSig)]
[numthreads(1,1,1)]
void main(uint GI : SV_GroupIndex) {
  Out1[GI].A = In[GI].A * InExtra[GI].B;
  Out2[GI].A = In[GI].A * InExtra[GI].B * 2;
}

//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
RuntimeSettings:
  DirectX:
    RootParameters:
      - Kind: DescriptorTable
Buffers:
  - Name: In
    Format: Float32
    Stride: 32
    Data: [ 2, 4, 6, 8, 10, 12, 14, 16]
  - Name: InExtra
    Format: Float32
    Stride: 32
    Data: [ 2, 4, 6, 8, 10, 12, 14, 16]
  - Name: Out1
    Format: Float32
    Channels: 4
    ZeroInitSize: 16
  - Name: Out2
    Format: Float32
    Channels: 4
    ZeroInitSize: 16
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: InExtra
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
    - Name: Out2
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s
# RUN: obj2yaml %t.o | FileCheck %s --check-prefix=OBJ

# CHECK-LABEL: Name: Out1
# CHECK: Data: [ 20, 48, 84, 128 ]
# CHECK-LABEL: Name: Out2
# CHECK: Data: [ 40, 96, 168, 256 ]

## Root Signature Header
# OBJ: - Name:            RTS0
# OBJ:   Size:            116
# OBJ:   RootSignature:
# OBJ:   Version:         2
# OBJ:   NumRootParameters: 1
# OBJ:   RootParametersOffset: 24
# OBJ:   NumStaticSamplers: 0
# OBJ:   StaticSamplersOffset: 116

# OBJ: Parameters:

## DescriptorTable
# OBJ: - ParameterType:   0
# OBJ:   ShaderVisibility: 0
# OBJ:   Table:
# OBJ:   NumRanges:       3
# OBJ:   RangesOffset:    44
# OBJ:   Ranges:

## UAV(u2, offset = 3, numDescriptors = unbounded)
# OBJ: - RangeType:       1
## Ensure unbounded descriptors
# OBJ:   NumDescriptors:  -1
# OBJ:   BaseShaderRegister: 2
# OBJ:   RegisterSpace:   0
## Ensure offset = 3
# OBJ:   OffsetInDescriptorsFromTableStart: 3

## SRV(t0, offset = 0, numDescriptors = 2)
# OBJ: - RangeType:       0
## Ensure 2 descriptors
# OBJ:  NumDescriptors:  2
# OBJ:  BaseShaderRegister: 0
# OBJ:  RegisterSpace:   0
## Ensure offset = 0
# OBJ:  OffsetInDescriptorsFromTableStart: 0

## UAV(u1,
##  offset = DESCRIPTOR_RANGE_OFFSET_APPEND,
##  numDescriptors = 1
## )
# OBJ: - RangeType:       1
## Ensure 1 descriptor
# OBJ: NumDescriptors:  1
# OBJ: BaseShaderRegister: 1
# OBJ: RegisterSpace:   0

## Ensure append
# OBJ: OffsetInDescriptorsFromTableStart: 4294967295
